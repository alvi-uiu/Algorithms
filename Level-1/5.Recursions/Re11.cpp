#include <bits/stdc++.h>
using namespace std;

// Brute : 0(2^n)*n*log(n)

void fn(int idx, int target, vector<int> &candids, vector<int> &arr, set<vector<int>> &ans)
{

    if (idx >= candids.size())
    {
        if (target == 0)
        {
            ans.insert(arr);
            return;
        }
        return;
    }

    // pick:
    if (candids[idx] <= target)
    {
        arr.push_back(candids[idx]);

        fn(idx + 1, target - candids[idx], candids, arr, ans);
        arr.pop_back();
    }
    // not-pick:
    fn(idx + 1, target, candids, arr, ans);
}

vector<vector<int>> combinationSum2(vector<int> &candidates, int target)
{
    vector<int> arr;
    set<vector<int>> ans;
    sort(candidates.begin(), candidates.end()); // sort for not taking duplicates
    fn(0, target, candidates, arr, ans);
    vector<vector<int>> res(ans.begin(), ans.end());
    return res;
}

/*----------------------------------------------------------------------*/

void fn(int idx, int target, vector<int> &arr, vector<int> &candids, vector<vector<int>> &ans)
{

    // base case :

    if (target == 0)
    {
        ans.push_back(arr);
        return;
    }

    for (int i = idx; i < candids.size(); i++)
    {
        if (i > idx && candids[i - 1] == candids[i])
            continue;

        if (candids[i] <= target)
        {
            arr.push_back(candids[i]);
            fn(i + 1, target - candids[i], arr, candids, ans);
            arr.pop_back();
        }
        else
            break;
    }
}

class Solution
{
public:
    vector<vector<int>> combinationSum2(vector<int> &candidates, int target)
    {
        vector<int> arr;
        vector<vector<int>> ans;
        sort(candidates.begin(), candidates.end());
        fn(0, target, arr, candidates, ans);
        return ans;
    }
};

int main()
{

    return 0;
}

/*
Example 1: Handling Duplicates

Consider the input candidates = {10, 1, 2, 7, 6, 1, 5} and target = 8.
Without Sorting:

Without sorting, the recursive function will process the candidates in the given order. Here's what happens:

    The combination [1, 2, 5] could be generated multiple ways:
        By picking 1 at index 1, 2 at index 2, and 5 at index 6.
        By picking 1 at index 5 (the second occurrence), 2 at index 2, and 5 at index 6.

These paths produce the same combination [1, 2, 5], leading to duplicates even though we use a set to store unique combinations. Here’s a step-by-step process:

    Pick 1 (index 1), then 2 (index 2), then 5 (index 6) → [1, 2, 5]
    Pick 1 (index 5), then 2 (index 2), then 5 (index 6) → [1, 2, 5]

Even with a set, duplicates might occur in intermediate steps before filtering out, which increases unnecessary computations.
With Sorting:

When the candidates are sorted first, the input becomes candidates = {1, 1, 2, 5, 6, 7, 10}.

Now, the recursive function processes the candidates in ascending order:

    The combination [1, 2, 5] can only be generated by picking 1 at index 0 or 1, 2 at index 2, and 5 at index 3.

By sorting, we ensure that combinations are built in a lexicographically ordered manner, and each combination appears only once. For example:

    Pick 1 (index 0), then 2 (index 2), then 5 (index 3) → [1, 2, 5]
    Pick 1 (index 1), then 2 (index 2), then 5 (index 3) → [1, 2, 5]

Even though these paths still generate [1, 2, 5], the set ensures only one instance is stored.

 */